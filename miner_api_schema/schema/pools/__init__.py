from __future__ import annotations

from pydantic import BaseModel

from miner_api_schema.schema.base import BaseResponse


class PoolWorkInfo(BaseModel):
    """
    :param generated: The amount of work generated for this pool.
    :param accepted: The amount of work accepted by the pool.
    :param rejected: The amount of work rejected by the pool.
    :param stale: The amount of work marked as stale by the pool.
    """

    generated: int
    accepted: int
    rejected: int
    stale: int


class SV1PoolInfo(BaseModel):
    """
    :param id: The pool ID, indexed from 0.
    :param enabled: Whether this pool is enabled.
    :param alive: Whether a connection to this pool is possible.
    :param active: Whether this is the currently active pool.
    :param scheme: The pool connection scheme, as described by RFC 3986.
    :param host: The pool hostname or IP.
    :param port: The port for the pool.
    :param url: The full URL of the pool.
    :param work: Information on work generated by the miner.
    """

    id: int
    enabled: bool
    alive: bool
    active: bool
    scheme: str
    host: str
    port: str
    url: str
    work: PoolWorkInfo


class SV2PoolInfo(SV1PoolInfo):
    """
    :param pubkey: The public key of the pool used by the noise handshake to verify the identity of the pool.
    """

    pubkey: str


class PoolGroupInfo(BaseModel):
    """
    :param id: The id of this group, indexed from 0.
    :param name: The name of the group.
    :param pools: The pools in this group.
    :param share_pct: The percentage of shares that should be sent to this group.
    :param active_pool: The id of the currently active pool for this group.
    """

    id: int
    name: str
    pools: list[SV1PoolInfo | SV1PoolInfo]
    share_pct: float
    active_pool: int


class PoolsResult(BaseModel):
    """
    :param groups: The pool groups on this miner.
    :param total_work: Information on the sum of work across all groups.
    """

    groups: PoolGroupInfo
    total_work: PoolWorkInfo


class PoolsResponse(BaseResponse):
    result: PoolsResult
